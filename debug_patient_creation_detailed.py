#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
–õ–æ–≥–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã
"""

import asyncio
import sys
import os
import traceback
import json
from datetime import datetime
sys.path.append('/mnt/c/Users/aurik/Code_Projects/2_scraper')

import logging
from sqlalchemy.ext.asyncio import AsyncSession

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s'
)

logger = logging.getLogger(__name__)

async def detailed_patient_creation_diagnosis():
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    
    print("–ù–ê–ß–ò–ù–ê–ï–ú –î–ï–¢–ê–õ–¨–ù–£–Æ –î–ò–ê–ì–ù–û–°–¢–ò–ö–£ –°–û–ó–î–ê–ù–ò–Ø –ü–ê–¶–ò–ï–ù–¢–ê")
    print("=" * 80)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    test_patient_data = {
        "resourceType": "Patient",
        "identifier": [{
            "use": "official",
            "type": {
                "coding": [{
                    "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
                    "code": "MR"
                }]
            },
            "system": "http://hospital.smarthit.org",
            "value": "DIAG001"
        }],
        "name": [{
            "use": "official",
            "family": "DiagnosticTest",
            "given": ["Patient"]
        }],
        "gender": "male",
        "birthDate": "1990-01-01",
        "active": True,
        "organization_id": "550e8400-e29b-41d4-a716-446655440000"
    }
    
    try:
        # ===== –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í =====
        print("\n–®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        try:
            from app.core.database_unified import get_db, Patient, DataClassification
            print("‚úÖ database_unified –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ database_unified: {e}")
            return False
            
        try:
            from app.core.security import SecurityManager
            print("‚úÖ SecurityManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ SecurityManager: {e}")
            return False
            
        try:
            from app.modules.healthcare_records.service import PatientService
            print("‚úÖ PatientService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ PatientService: {e}")
            print(f"Traceback: {traceback.format_exc()}")
            return False
            
        # ===== –®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê –ú–û–î–ï–õ–ò PATIENT =====
        print("\nüóÉÔ∏è –®–ê–ì 2: –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏ Patient")
        patient_fields = [attr for attr in dir(Patient) if not attr.startswith('_')]
        print(f"üìã –ü–æ–ª—è –º–æ–¥–µ–ª–∏ Patient: {patient_fields}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
        critical_fields = ['tenant_id', 'organization_id', 'external_id', 'mrn']
        for field in critical_fields:
            if hasattr(Patient, field):
                print(f"‚úÖ –ü–æ–ª–µ {field} –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"‚ùå –ü–æ–ª–µ {field} –û–¢–°–£–¢–°–¢–í–£–ï–¢")
        
        # ===== –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î =====
        print("\nüíæ –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        async for session in get_db():
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã patients
            try:
                inspector = inspect(session.bind)
                if hasattr(inspector, 'get_columns'):
                    columns = inspector.get_columns('patients')
                    print(f"üìä –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã patients: {[col['name'] for col in columns]}")
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã: {e}")
            
            # ===== –®–ê–ì 4: –°–û–ó–î–ê–ù–ò–ï SECURITY MANAGER =====
            print("\nüîê –®–ê–ì 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SecurityManager")
            try:
                security_manager = SecurityManager()
                print("‚úÖ SecurityManager —Å–æ–∑–¥–∞–Ω")
                
                # –¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
                test_data = "test_encryption"
                encrypted = security_manager.encrypt_data(test_data)
                print(f"‚úÖ –¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—à–µ–ª: {len(encrypted)} —Å–∏–º–≤–æ–ª–æ–≤")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ SecurityManager: {e}")
                print(f"Traceback: {traceback.format_exc()}")
                return False
            
            # ===== –®–ê–ì 5: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø PATIENT SERVICE =====
            print("\nüè• –®–ê–ì 5: –°–æ–∑–¥–∞–Ω–∏–µ PatientService")
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
                from app.modules.healthcare_records.service import get_healthcare_service
                service = await get_healthcare_service(session=session)
                print("‚úÖ PatientService —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ get_healthcare_service")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PatientService: {e}")
                print(f"Traceback: {traceback.format_exc()}")
                
                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
                try:
                    patient_service = PatientService(session)
                    print("‚úÖ PatientService —Å–æ–∑–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é")
                except Exception as e2:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: {e2}")
                    return False
            
            # ===== –®–ê–ì 6: –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê =====
            print("\nüë§ –®–ê–ì 6: –°–æ–∑–¥–∞–Ω–∏–µ AccessContext")
            try:
                from app.modules.healthcare_records.service import AccessContext
                context = AccessContext(
                    user_id="test-user-id",
                    purpose="treatment",
                    role="admin",
                    ip_address="127.0.0.1",
                    session_id="test-session"
                )
                print("‚úÖ AccessContext —Å–æ–∑–¥–∞–Ω")
                print(f"üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context.__dict__}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AccessContext: {e}")
                print(f"Traceback: {traceback.format_exc()}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                context = None
            
            # ===== –®–ê–ì 7: –ü–û–ü–´–¢–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–ê–¶–ò–ï–ù–¢–ê –ß–ï–†–ï–ó –°–ï–†–í–ò–° =====
            print("\nüèóÔ∏è –®–ê–ì 7: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ PatientService")
            try:
                print(f"üì® –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(test_patient_data, indent=2)}")
                
                # –í—ã–∑—ã–≤–∞–µ–º create_patient
                if context:
                    result = await service.patient_service.create_patient(test_patient_data, context)
                else:
                    print("‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
                    result = await service.patient_service.create_patient(test_patient_data)
                
                print(f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å: {result}")
                
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ß–ï–†–ï–ó –°–ï–†–í–ò–°: {e}")
                print(f"üîç –ü–æ–ª–Ω—ã–π traceback:")
                print(traceback.format_exc())
                
                # ===== –®–ê–ì 8: –ü–†–Ø–ú–û–ï –°–û–ó–î–ê–ù–ò–ï –í –ë–î =====
                print("\nüîß –®–ê–ì 8: –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ë–î")
                try:
                    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
                    patient = Patient(
                        external_id=test_patient_data["identifier"][0]["value"],
                        mrn=f"MRN-{test_patient_data['identifier'][0]['value']}",
                        first_name_encrypted=security_manager.encrypt_data(test_patient_data["name"][0]["given"][0]),
                        last_name_encrypted=security_manager.encrypt_data(test_patient_data["name"][0]["family"]),
                        date_of_birth_encrypted=security_manager.encrypt_data(test_patient_data["birthDate"]),
                        data_classification="phi",
                        consent_status={"status": "pending", "types": ["treatment"]}
                    )
                    
                    session.add(patient)
                    await session.commit()
                    await session.refresh(patient)
                    
                    print(f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î: {patient.id}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
                    print("üìã –ü–æ–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞:")
                    for attr in dir(patient):
                        if not attr.startswith('_') and hasattr(patient, attr):
                            try:
                                value = getattr(patient, attr)
                                if not callable(value):
                                    print(f"  {attr}: {value}")
                            except Exception:
                                print(f"  {attr}: <–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ>")
                    
                except Exception as e2:
                    print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–Ø–ú–û–ì–û –°–û–ó–î–ê–ù–ò–Ø: {e2}")
                    print(f"üîç Traceback: {traceback.format_exc()}")
                    return False
            
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ async for
        
        print("\n" + "=" * 80)
        print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        return True
        
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: {e}")
        print(f"üîç Traceback: {traceback.format_exc()}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await detailed_patient_creation_diagnosis()
    
    if success:
        print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return 0
    else:
        print("\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã—è–≤–∏–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return 1

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(result)