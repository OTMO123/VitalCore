"""Fix last_login_ip column type from VARCHAR to INET

Revision ID: 87cdf07bd71f
Revises: fix_user_role_enum
Create Date: 2025-08-02 02:18:56.142710

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '87cdf07bd71f'
down_revision = 'fix_user_role_enum'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop tables with foreign key dependencies first (child tables before parent tables)
    
    # Drop child tables that depend on clinical_workflows
    op.drop_index(op.f('idx_step_status_started'), table_name='clinical_workflow_steps')
    op.drop_index(op.f('idx_step_type_completed'), table_name='clinical_workflow_steps')
    op.drop_index(op.f('idx_step_workflow_order'), table_name='clinical_workflow_steps')
    op.drop_table('clinical_workflow_steps')
    
    op.drop_index(op.f('idx_audit_event_type'), table_name='clinical_workflow_audit')
    op.drop_index(op.f('idx_audit_phi_access'), table_name='clinical_workflow_audit')
    op.drop_index(op.f('idx_audit_risk_level'), table_name='clinical_workflow_audit')
    op.drop_index(op.f('idx_audit_user_timestamp'), table_name='clinical_workflow_audit')
    op.drop_index(op.f('idx_audit_workflow_timestamp'), table_name='clinical_workflow_audit')
    op.drop_table('clinical_workflow_audit')
    
    # Drop clinical_encounters (depends on clinical_workflows)
    op.drop_index(op.f('idx_encounter_class_status'), table_name='clinical_encounters')
    op.drop_index(op.f('idx_encounter_fhir_id'), table_name='clinical_encounters')
    op.drop_index(op.f('idx_encounter_patient_date'), table_name='clinical_encounters')
    op.drop_index(op.f('idx_encounter_provider_date'), table_name='clinical_encounters')
    op.drop_table('clinical_encounters')
    
    # Drop clinical_workflows table (child of organizations)
    op.drop_index(op.f('idx_workflow_data_classification'), table_name='clinical_workflows')
    op.drop_index(op.f('idx_workflow_fhir_id'), table_name='clinical_workflows')
    op.drop_index(op.f('idx_workflow_patient_provider'), table_name='clinical_workflows')
    op.drop_index(op.f('idx_workflow_status_priority'), table_name='clinical_workflows')
    op.drop_index(op.f('idx_workflow_type_priority'), table_name='clinical_workflows')
    op.drop_table('clinical_workflows')
    
    # Now drop organizations table (parent table)
    op.drop_table('organizations')
    
    # Drop other independent tables
    op.drop_index(op.f('ix_purge_policies_resource_type'), table_name='purge_policies')
    op.drop_table('purge_policies')
    
    op.drop_index(op.f('ix_document_access_audit_accessed_at'), table_name='document_access_audit')
    op.drop_index(op.f('ix_document_access_audit_action'), table_name='document_access_audit')
    op.drop_index(op.f('ix_document_access_audit_block_number'), table_name='document_access_audit')
    op.drop_index(op.f('ix_document_access_audit_document_id'), table_name='document_access_audit')
    op.drop_index(op.f('ix_document_access_audit_user_id'), table_name='document_access_audit')
    op.drop_table('document_access_audit')
    
    # Drop document_shares first (depends on document_storage)
    op.drop_index(op.f('ix_document_shares_document_id'), table_name='document_shares')
    op.drop_index(op.f('ix_document_shares_expires_at'), table_name='document_shares')
    op.drop_index(op.f('ix_document_shares_revoked_at'), table_name='document_shares')
    op.drop_index(op.f('ix_document_shares_shared_with'), table_name='document_shares')
    op.drop_table('document_shares')
    
    # Then drop document_storage
    op.drop_index(op.f('ix_document_storage_document_type'), table_name='document_storage')
    op.drop_index(op.f('ix_document_storage_hash_sha256'), table_name='document_storage')
    op.drop_index(op.f('ix_document_storage_orthanc_instance_id'), table_name='document_storage')
    op.drop_index(op.f('ix_document_storage_orthanc_series_id'), table_name='document_storage')
    op.drop_index(op.f('ix_document_storage_orthanc_study_id'), table_name='document_storage')
    op.drop_index(op.f('ix_document_storage_patient_id'), table_name='document_storage')
    op.drop_table('document_storage')
    
    op.drop_table('iris_api_logs')
    
    op.drop_index(op.f('ix_compliance_reports_created_at'), table_name='compliance_reports')
    op.drop_index(op.f('ix_compliance_reports_report_type'), table_name='compliance_reports')
    op.drop_index(op.f('ix_compliance_reports_status'), table_name='compliance_reports')
    op.drop_table('compliance_reports')
    op.add_column('api_credentials', sa.Column('api_endpoint_id', sa.UUID(), nullable=False))
    op.add_column('api_credentials', sa.Column('credential_name', sa.String(length=255), nullable=False))
    op.add_column('api_credentials', sa.Column('encrypted_value', sa.Text(), nullable=False))
    op.add_column('api_credentials', sa.Column('last_rotated_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('api_credentials', sa.Column('rotation_reminder_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('api_credentials', sa.Column('created_by', sa.UUID(), nullable=False))
    op.alter_column('api_credentials', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('api_credentials', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('api_credentials', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_index('unique_endpoint_credential', 'api_credentials', ['api_endpoint_id', 'credential_name'], unique=True)
    op.create_foreign_key(None, 'api_credentials', 'api_endpoints', ['api_endpoint_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'api_credentials', 'users', ['created_by'], ['id'])
    op.drop_column('api_credentials', 'allowed_endpoints')
    op.drop_column('api_credentials', 'name')
    op.drop_column('api_credentials', 'secret_key_encrypted')
    op.drop_column('api_credentials', 'last_used_at')
    op.drop_column('api_credentials', 'api_key_hash')
    op.drop_column('api_credentials', 'rate_limit')
    
    # Create enum type before using it
    apistatus_enum = postgresql.ENUM('ACTIVE', 'INACTIVE', 'MAINTENANCE', 'DEPRECATED', name='apistatus')
    apistatus_enum.create(op.get_bind())
    
    op.add_column('api_endpoints', sa.Column('name', sa.String(length=255), nullable=False))
    op.add_column('api_endpoints', sa.Column('base_url', sa.String(length=500), nullable=False))
    op.add_column('api_endpoints', sa.Column('api_version', sa.String(length=50), nullable=True))
    op.add_column('api_endpoints', sa.Column('status', apistatus_enum, nullable=False))
    op.add_column('api_endpoints', sa.Column('auth_type', sa.String(length=50), nullable=False))
    op.add_column('api_endpoints', sa.Column('rate_limit_requests', sa.Integer(), nullable=True))
    op.add_column('api_endpoints', sa.Column('rate_limit_window_seconds', sa.Integer(), nullable=True))
    op.add_column('api_endpoints', sa.Column('timeout_seconds', sa.Integer(), nullable=False))
    op.add_column('api_endpoints', sa.Column('retry_attempts', sa.Integer(), nullable=False))
    op.add_column('api_endpoints', sa.Column('retry_delay_seconds', sa.Integer(), nullable=False))
    op.add_column('api_endpoints', sa.Column('circuit_breaker_threshold', sa.Integer(), nullable=False))
    op.add_column('api_endpoints', sa.Column('circuit_breaker_timeout_seconds', sa.Integer(), nullable=False))
    op.add_column('api_endpoints', sa.Column('ssl_verify', sa.Boolean(), nullable=False))
    op.add_column('api_endpoints', sa.Column('health_check_endpoint', sa.String(length=500), nullable=True))
    op.add_column('api_endpoints', sa.Column('health_check_interval_seconds', sa.Integer(), nullable=False))
    op.add_column('api_endpoints', sa.Column('last_health_check_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('api_endpoints', sa.Column('last_health_check_status', sa.Boolean(), nullable=True))
    op.add_column('api_endpoints', sa.Column('config_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.alter_column('api_endpoints', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('api_endpoints', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_unique_constraint(None, 'api_endpoints', ['name'])
    op.drop_column('api_endpoints', 'requires_auth')
    op.drop_column('api_endpoints', 'path')
    op.drop_column('api_endpoints', 'required_permissions')
    op.drop_column('api_endpoints', 'method')
    op.drop_column('api_endpoints', 'is_enabled')
    op.drop_column('api_endpoints', 'rate_limit')
    op.add_column('api_requests', sa.Column('api_endpoint_id', sa.UUID(), nullable=False))
    op.add_column('api_requests', sa.Column('correlation_id', sa.UUID(), nullable=False))
    op.add_column('api_requests', sa.Column('endpoint_path', sa.String(length=500), nullable=False))
    op.add_column('api_requests', sa.Column('request_headers', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('api_requests', sa.Column('request_body', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('api_requests', sa.Column('request_hash', sa.String(length=64), nullable=True))
    op.add_column('api_requests', sa.Column('response_status_code', sa.Integer(), nullable=True))
    op.add_column('api_requests', sa.Column('response_headers', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('api_requests', sa.Column('response_body', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('api_requests', sa.Column('attempt_count', sa.Integer(), nullable=False))
    op.add_column('api_requests', sa.Column('total_duration_ms', sa.Integer(), nullable=True))
    op.add_column('api_requests', sa.Column('error_message', sa.Text(), nullable=True))
    op.add_column('api_requests', sa.Column('error_stack_trace', sa.Text(), nullable=True))
    op.add_column('api_requests', sa.Column('user_agent', sa.Text(), nullable=True))
    op.add_column('api_requests', sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('api_requests', 'method',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=20),
               existing_nullable=False)
    # Convert VARCHAR to INET with explicit casting
    op.execute("ALTER TABLE api_requests ALTER COLUMN ip_address TYPE INET USING ip_address::inet")
    op.alter_column('api_requests', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('api_requests', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_constraint(op.f('api_requests_request_id_key'), 'api_requests', type_='unique')
    op.create_foreign_key(None, 'api_requests', 'api_endpoints', ['api_endpoint_id'], ['id'])
    op.create_foreign_key(None, 'api_requests', 'users', ['user_id'], ['id'])
    op.drop_column('api_requests', 'status_code')
    op.drop_column('api_requests', 'duration_ms')
    op.drop_column('api_requests', 'endpoint')
    op.drop_column('api_requests', 'request_id')
    # Add result column with default value for existing records
    op.add_column('audit_logs', sa.Column('result', sa.String(length=50), nullable=True))
    op.execute("UPDATE audit_logs SET result = 'UNKNOWN' WHERE result IS NULL")
    op.alter_column('audit_logs', 'result', nullable=False)
    op.alter_column('audit_logs', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    # Convert VARCHAR to INET with explicit casting for audit_logs
    op.execute("ALTER TABLE audit_logs ALTER COLUMN ip_address TYPE INET USING ip_address::inet")
    op.alter_column('audit_logs', 'request_method',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=20),
               existing_nullable=True)
    # Update NULL values before making config_metadata NOT NULL
    op.execute("UPDATE audit_logs SET config_metadata = '{}' WHERE config_metadata IS NULL")
    op.alter_column('audit_logs', 'config_metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               nullable=False)
    op.alter_column('audit_logs', 'data_classification',
               existing_type=postgresql.ENUM('public', 'internal', 'confidential', 'restricted', 'phi', 'pii', name='dataclassification'),
               nullable=True)
    op.drop_index(op.f('idx_audit_logs_event_type_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_logs_timestamp_user'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_event_type'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_user_id'), table_name='audit_logs')
    
    # Convert user_id from VARCHAR to UUID before creating foreign key
    # First, handle invalid UUID values by setting them to NULL or a default UUID
    op.execute("""
        UPDATE audit_logs 
        SET user_id = NULL 
        WHERE user_id !~ '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
    """)
    
    # Now convert the column type
    op.execute("ALTER TABLE audit_logs ALTER COLUMN user_id TYPE UUID USING user_id::uuid")
    
    # Clean up orphaned user_id values that don't exist in users table
    op.execute("""
        UPDATE audit_logs 
        SET user_id = NULL 
        WHERE user_id IS NOT NULL 
        AND user_id NOT IN (SELECT id FROM users WHERE id IS NOT NULL)
    """)
    
    op.create_foreign_key(None, 'audit_logs', 'users', ['user_id'], ['id'])
    op.drop_column('audit_logs', 'outcome')
    op.drop_column('audit_logs', 'created_at')
    op.drop_column('audit_logs', 'updated_at')
    op.drop_column('audit_logs', 'sequence_number')
    op.add_column('clinical_documents', sa.Column('status', sa.String(length=50), nullable=False))
    op.add_column('clinical_documents', sa.Column('encounter_id', sa.UUID(), nullable=True))
    op.add_column('clinical_documents', sa.Column('content_type', sa.String(length=100), nullable=False))
    op.add_column('clinical_documents', sa.Column('confidentiality_level', sa.String(length=20), nullable=False))
    op.add_column('clinical_documents', sa.Column('access_level', sa.String(length=50), nullable=False))
    op.add_column('clinical_documents', sa.Column('fhir_identifier', sa.String(length=255), nullable=True))
    op.add_column('clinical_documents', sa.Column('category', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('clinical_documents', sa.Column('author_references', postgresql.ARRAY(sa.String()), nullable=False))
    op.add_column('clinical_documents', sa.Column('custodian_reference', sa.String(length=255), nullable=True))
    op.add_column('clinical_documents', sa.Column('created_by', sa.UUID(), nullable=False))
    op.add_column('clinical_documents', sa.Column('authorized_roles', postgresql.ARRAY(sa.String()), nullable=False))
    op.add_column('clinical_documents', sa.Column('authorized_users', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('clinical_documents', sa.Column('last_accessed_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('clinical_documents', sa.Column('access_count', sa.Integer(), nullable=False))
    op.add_column('clinical_documents', sa.Column('retention_date', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('clinical_documents', 'fhir_resource_type',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('clinical_documents', 'soft_deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('clinical_documents', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('clinical_documents', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_index('idx_document_created_at', 'clinical_documents', ['created_at'], unique=False)
    op.create_index('idx_patient_document_type', 'clinical_documents', ['patient_id', 'document_type'], unique=False)
    op.create_index(op.f('ix_clinical_documents_document_type'), 'clinical_documents', ['document_type'], unique=False)
    op.create_index(op.f('ix_clinical_documents_patient_id'), 'clinical_documents', ['patient_id'], unique=False)
    op.create_foreign_key(None, 'clinical_documents', 'users', ['created_by'], ['id'])
    op.drop_column('clinical_documents', 'fhir_resource_id')
    op.alter_column('consents', 'signature_data',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('consents', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('consents', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_index('idx_consent_effective_period', 'consents', ['effective_period_start', 'effective_period_end'], unique=False)
    op.create_index('idx_patient_consent_status', 'consents', ['patient_id', 'status'], unique=False)
    op.add_column('immunizations', sa.Column('administration_date', sa.DATE(), nullable=False))
    op.add_column('immunizations', sa.Column('manufacturer', sa.String(length=255), nullable=True))
    op.add_column('immunizations', sa.Column('dose_number', sa.Integer(), nullable=True))
    op.add_column('immunizations', sa.Column('series_complete', sa.Boolean(), nullable=False))
    op.add_column('immunizations', sa.Column('administered_by', sa.String(length=255), nullable=True))
    op.add_column('immunizations', sa.Column('administration_site', sa.String(length=100), nullable=True))
    op.add_column('immunizations', sa.Column('route', sa.String(length=50), nullable=True))
    op.add_column('immunizations', sa.Column('iris_record_id', sa.String(length=255), nullable=True))
    op.add_column('immunizations', sa.Column('data_source', sa.String(length=100), nullable=True))
    # Check if soft_deleted_at column already exists before adding it
    op.execute("""
        DO $$ 
        BEGIN 
            IF NOT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'immunizations' 
                AND column_name = 'soft_deleted_at'
            ) THEN
                ALTER TABLE immunizations ADD COLUMN soft_deleted_at TIMESTAMP WITH TIME ZONE;
            END IF;
        END $$;
    """)
    op.alter_column('immunizations', 'vaccine_code',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('immunizations', 'vaccine_name',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.String(length=255),
               nullable=True)
    op.alter_column('immunizations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('immunizations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_constraint(op.f('immunizations_iris_id_key'), 'immunizations', type_='unique')
    op.drop_column('immunizations', 'administered_date')
    op.drop_column('immunizations', 'administrator')
    op.drop_column('immunizations', 'sync_status')
    op.drop_column('immunizations', 'iris_id')
    op.drop_column('immunizations', 'last_sync_at')
    op.alter_column('patients', 'first_name_encrypted',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('patients', 'last_name_encrypted',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('patients', 'date_of_birth_encrypted',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('patients', 'consent_status',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('patients', 'iris_last_sync_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('patients', 'soft_deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('patients', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('patients', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index(op.f('idx_patients_mrn'), table_name='patients')
    op.drop_index(op.f('ix_patients_external_id'), table_name='patients')
    op.drop_index(op.f('ix_patients_mrn'), table_name='patients')
    op.drop_index(op.f('ix_patients_organization_id'), table_name='patients')
    op.drop_index(op.f('ix_patients_tenant_id'), table_name='patients')
    op.create_unique_constraint(None, 'patients', ['external_id'])
    op.drop_column('patients', 'organization_id')
    op.drop_column('patients', 'tenant_id')
    op.drop_column('patients', 'active')
    op.drop_column('patients', 'gender')
    op.add_column('permissions', sa.Column('resource', sa.String(length=255), nullable=False))
    op.add_column('permissions', sa.Column('is_system_permission', sa.Boolean(), nullable=False))
    op.alter_column('permissions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('permissions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_constraint(op.f('permissions_name_key'), 'permissions', type_='unique')
    op.create_index('unique_resource_action', 'permissions', ['resource', 'action'], unique=True)
    op.drop_column('permissions', 'name')
    op.drop_column('permissions', 'resource_type')
    # Add access_session_id column with default value for existing records
    op.add_column('phi_access_logs', sa.Column('access_session_id', sa.String(length=255), nullable=True))
    op.execute("UPDATE phi_access_logs SET access_session_id = CONCAT('legacy-session-', id::text) WHERE access_session_id IS NULL")
    op.alter_column('phi_access_logs', 'access_session_id', nullable=False)
    op.add_column('phi_access_logs', sa.Column('correlation_id', sa.UUID(), nullable=True))
    op.add_column('phi_access_logs', sa.Column('clinical_document_id', sa.UUID(), nullable=True))
    op.add_column('phi_access_logs', sa.Column('consent_id', sa.UUID(), nullable=True))
    # Add user_role column with default value for existing records
    op.add_column('phi_access_logs', sa.Column('user_role', sa.String(length=100), nullable=True))
    op.execute("UPDATE phi_access_logs SET user_role = 'UNKNOWN' WHERE user_role IS NULL")
    op.alter_column('phi_access_logs', 'user_role', nullable=False)
    
    op.add_column('phi_access_logs', sa.Column('organization_id', sa.UUID(), nullable=True))
    
    # Add phi_fields_accessed column with default value for existing records
    op.add_column('phi_access_logs', sa.Column('phi_fields_accessed', postgresql.ARRAY(sa.String()), nullable=True))
    op.execute("UPDATE phi_access_logs SET phi_fields_accessed = '{}' WHERE phi_fields_accessed IS NULL")
    op.alter_column('phi_access_logs', 'phi_fields_accessed', nullable=False)
    
    # Add access_purpose column with default value for existing records
    op.add_column('phi_access_logs', sa.Column('access_purpose', sa.String(length=255), nullable=True))
    op.execute("UPDATE phi_access_logs SET access_purpose = 'LEGACY_ACCESS' WHERE access_purpose IS NULL")
    op.alter_column('phi_access_logs', 'access_purpose', nullable=False)
    
    # Add legal_basis column with default value for existing records
    op.add_column('phi_access_logs', sa.Column('legal_basis', sa.String(length=255), nullable=True))
    op.execute("UPDATE phi_access_logs SET legal_basis = 'LEGACY_BASIS' WHERE legal_basis IS NULL")
    op.alter_column('phi_access_logs', 'legal_basis', nullable=False)
    op.add_column('phi_access_logs', sa.Column('request_method', sa.String(length=20), nullable=True))
    op.add_column('phi_access_logs', sa.Column('request_path', sa.String(length=500), nullable=True))
    op.add_column('phi_access_logs', sa.Column('request_parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    
    # Add access_granted column with default value for existing records
    op.add_column('phi_access_logs', sa.Column('access_granted', sa.Boolean(), nullable=True))
    op.execute("UPDATE phi_access_logs SET access_granted = true WHERE access_granted IS NULL")
    op.alter_column('phi_access_logs', 'access_granted', nullable=False)
    
    op.add_column('phi_access_logs', sa.Column('denial_reason', sa.String(length=255), nullable=True))
    
    # Add data_returned column with default value for existing records
    op.add_column('phi_access_logs', sa.Column('data_returned', sa.Boolean(), nullable=True))
    op.execute("UPDATE phi_access_logs SET data_returned = true WHERE data_returned IS NULL")
    op.alter_column('phi_access_logs', 'data_returned', nullable=False)
    op.add_column('phi_access_logs', sa.Column('data_hash', sa.String(length=64), nullable=True))
    op.add_column('phi_access_logs', sa.Column('user_agent', sa.Text(), nullable=True))
    op.add_column('phi_access_logs', sa.Column('session_duration_ms', sa.Integer(), nullable=True))
    
    # Add remaining NOT NULL columns with default values for existing records
    op.add_column('phi_access_logs', sa.Column('consent_verified', sa.Boolean(), nullable=True))
    op.execute("UPDATE phi_access_logs SET consent_verified = false WHERE consent_verified IS NULL")
    op.alter_column('phi_access_logs', 'consent_verified', nullable=False)
    
    op.add_column('phi_access_logs', sa.Column('minimum_necessary_applied', sa.Boolean(), nullable=True))
    op.execute("UPDATE phi_access_logs SET minimum_necessary_applied = false WHERE minimum_necessary_applied IS NULL")
    op.alter_column('phi_access_logs', 'minimum_necessary_applied', nullable=False)
    
    op.add_column('phi_access_logs', sa.Column('data_classification', sa.Enum('PUBLIC', 'INTERNAL', 'CONFIDENTIAL', 'RESTRICTED', 'PHI', 'PII', name='dataclassification'), nullable=True))
    # Use a valid enum value from the existing dataclassification enum
    op.execute("UPDATE phi_access_logs SET data_classification = 'restricted' WHERE data_classification IS NULL")
    op.alter_column('phi_access_logs', 'data_classification', nullable=False)
    
    op.add_column('phi_access_logs', sa.Column('retention_category', sa.String(length=100), nullable=True))
    op.execute("UPDATE phi_access_logs SET retention_category = 'LEGACY' WHERE retention_category IS NULL")
    op.alter_column('phi_access_logs', 'retention_category', nullable=False)
    
    op.add_column('phi_access_logs', sa.Column('emergency_access', sa.Boolean(), nullable=True))
    op.execute("UPDATE phi_access_logs SET emergency_access = false WHERE emergency_access IS NULL")
    op.alter_column('phi_access_logs', 'emergency_access', nullable=False)
    
    op.add_column('phi_access_logs', sa.Column('emergency_justification', sa.Text(), nullable=True))
    op.add_column('phi_access_logs', sa.Column('supervisor_approval', sa.UUID(), nullable=True))
    
    op.add_column('phi_access_logs', sa.Column('unusual_access_pattern', sa.Boolean(), nullable=True))
    op.execute("UPDATE phi_access_logs SET unusual_access_pattern = false WHERE unusual_access_pattern IS NULL")
    op.alter_column('phi_access_logs', 'unusual_access_pattern', nullable=False)
    
    op.add_column('phi_access_logs', sa.Column('risk_score', sa.Integer(), nullable=True))
    
    op.add_column('phi_access_logs', sa.Column('flagged_for_review', sa.Boolean(), nullable=True))
    op.execute("UPDATE phi_access_logs SET flagged_for_review = false WHERE flagged_for_review IS NULL")
    op.alter_column('phi_access_logs', 'flagged_for_review', nullable=False)
    
    op.add_column('phi_access_logs', sa.Column('access_started_at', sa.DateTime(timezone=True), nullable=True))
    op.execute("UPDATE phi_access_logs SET access_started_at = created_at WHERE access_started_at IS NULL")
    op.alter_column('phi_access_logs', 'access_started_at', nullable=False)
    op.add_column('phi_access_logs', sa.Column('access_ended_at', sa.DateTime(timezone=True), nullable=True))
    # Convert VARCHAR to INET with explicit casting for phi_access_logs
    op.execute("ALTER TABLE phi_access_logs ALTER COLUMN ip_address TYPE INET USING ip_address::inet")
    op.alter_column('phi_access_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('phi_access_logs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index(op.f('idx_phi_access_patient_user'), table_name='phi_access_logs')
    op.create_index('idx_access_timestamp', 'phi_access_logs', [sa.literal_column('access_started_at DESC')], unique=False)
    op.create_index('idx_patient_access_audit', 'phi_access_logs', ['patient_id', 'access_started_at'], unique=False)
    op.create_index('idx_unusual_access', 'phi_access_logs', ['unusual_access_pattern', 'flagged_for_review'], unique=False)
    op.create_index('idx_user_access_audit', 'phi_access_logs', ['user_id', 'access_started_at'], unique=False)
    op.create_index(op.f('ix_phi_access_logs_access_session_id'), 'phi_access_logs', ['access_session_id'], unique=False)
    op.create_index(op.f('ix_phi_access_logs_patient_id'), 'phi_access_logs', ['patient_id'], unique=False)
    op.create_index(op.f('ix_phi_access_logs_user_id'), 'phi_access_logs', ['user_id'], unique=False)
    op.create_foreign_key(None, 'phi_access_logs', 'clinical_documents', ['clinical_document_id'], ['id'])
    op.create_foreign_key(None, 'phi_access_logs', 'users', ['supervisor_approval'], ['id'])
    op.create_foreign_key(None, 'phi_access_logs', 'consents', ['consent_id'], ['id'])
    op.drop_column('phi_access_logs', 'accessed_fields')
    op.drop_column('phi_access_logs', 'purpose')
    op.drop_column('phi_access_logs', 'session_id')
    op.add_column('role_permissions', sa.Column('granted_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('role_permissions', sa.Column('granted_by', sa.UUID(), nullable=False))
    op.drop_constraint(op.f('role_permissions_permission_id_fkey'), 'role_permissions', type_='foreignkey')
    op.drop_constraint(op.f('role_permissions_role_id_fkey'), 'role_permissions', type_='foreignkey')
    op.create_foreign_key(None, 'role_permissions', 'roles', ['role_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'role_permissions', 'users', ['granted_by'], ['id'])
    op.create_foreign_key(None, 'role_permissions', 'permissions', ['permission_id'], ['id'], ondelete='CASCADE')
    op.drop_column('role_permissions', 'id')
    op.drop_column('role_permissions', 'updated_at')
    op.drop_column('role_permissions', 'created_at')
    op.add_column('roles', sa.Column('parent_role_id', sa.UUID(), nullable=True))
    op.alter_column('roles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('roles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_foreign_key(None, 'roles', 'roles', ['parent_role_id'], ['id'])
    op.add_column('system_configuration', sa.Column('encrypted', sa.Boolean(), nullable=False))
    op.add_column('system_configuration', sa.Column('data_classification', sa.Enum('PUBLIC', 'INTERNAL', 'CONFIDENTIAL', 'RESTRICTED', 'PHI', 'PII', name='dataclassification'), nullable=False))
    op.add_column('system_configuration', sa.Column('valid_from', sa.DateTime(timezone=True), nullable=False))
    op.add_column('system_configuration', sa.Column('valid_to', sa.DateTime(timezone=True), nullable=True))
    op.add_column('system_configuration', sa.Column('created_by', sa.UUID(), nullable=False))
    op.add_column('system_configuration', sa.Column('modified_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('system_configuration', sa.Column('modified_by', sa.UUID(), nullable=False))
    op.alter_column('system_configuration', 'value',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('system_configuration', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('system_configuration', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_column('system_configuration', 'is_sensitive')
    op.add_column('user_roles', sa.Column('valid_from', sa.DateTime(timezone=True), nullable=False))
    op.add_column('user_roles', sa.Column('valid_to', sa.DateTime(timezone=True), nullable=True))
    op.add_column('user_roles', sa.Column('assignment_reason', sa.Text(), nullable=True))
    op.alter_column('user_roles', 'assigned_by',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_constraint(op.f('user_roles_role_id_fkey'), 'user_roles', type_='foreignkey')
    op.drop_constraint(op.f('user_roles_user_id_fkey'), 'user_roles', type_='foreignkey')
    op.create_foreign_key(None, 'user_roles', 'roles', ['role_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'user_roles', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'user_roles', 'users', ['assigned_by'], ['id'])
    op.drop_column('user_roles', 'assigned_at')
    op.drop_column('user_roles', 'id')
    op.drop_column('user_roles', 'updated_at')
    op.drop_column('user_roles', 'created_at')
    op.add_column('users', sa.Column('api_key_hash', sa.String(length=255), nullable=True))
    op.add_column('users', sa.Column('api_key_last_used', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('deactivated_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('users', 'locked_until',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'last_login_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'last_login_ip',
               existing_type=sa.VARCHAR(length=45),
               type_=postgresql.INET(),
               existing_nullable=True)
    op.alter_column('users', 'password_changed_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index(op.f('idx_users_email_active'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.create_unique_constraint(None, 'users', ['email'])
    op.create_unique_constraint(None, 'users', ['api_key_hash'])
    op.create_unique_constraint(None, 'users', ['username'])
    op.drop_column('users', 'profile_data')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('profile_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_constraint(None, 'users', type_='unique')
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('idx_users_email_active'), 'users', ['email', 'is_active'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('users', 'password_changed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('users', 'last_login_ip',
               existing_type=postgresql.INET(),
               type_=sa.VARCHAR(length=45),
               existing_nullable=True)
    op.alter_column('users', 'last_login_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'locked_until',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.drop_column('users', 'deactivated_at')
    op.drop_column('users', 'api_key_last_used')
    op.drop_column('users', 'api_key_hash')
    op.add_column('user_roles', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('user_roles', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('user_roles', sa.Column('id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('user_roles', sa.Column('assigned_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'user_roles', type_='foreignkey')
    op.drop_constraint(None, 'user_roles', type_='foreignkey')
    op.drop_constraint(None, 'user_roles', type_='foreignkey')
    op.create_foreign_key(op.f('user_roles_user_id_fkey'), 'user_roles', 'users', ['user_id'], ['id'])
    op.create_foreign_key(op.f('user_roles_role_id_fkey'), 'user_roles', 'roles', ['role_id'], ['id'])
    op.alter_column('user_roles', 'assigned_by',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('user_roles', 'assignment_reason')
    op.drop_column('user_roles', 'valid_to')
    op.drop_column('user_roles', 'valid_from')
    op.add_column('system_configuration', sa.Column('is_sensitive', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.alter_column('system_configuration', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('system_configuration', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('system_configuration', 'value',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=False)
    op.drop_column('system_configuration', 'modified_by')
    op.drop_column('system_configuration', 'modified_at')
    op.drop_column('system_configuration', 'created_by')
    op.drop_column('system_configuration', 'valid_to')
    op.drop_column('system_configuration', 'valid_from')
    op.drop_column('system_configuration', 'data_classification')
    op.drop_column('system_configuration', 'encrypted')
    op.drop_constraint(None, 'roles', type_='foreignkey')
    op.alter_column('roles', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('roles', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('roles', 'parent_role_id')
    op.add_column('role_permissions', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('role_permissions', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('role_permissions', sa.Column('id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'role_permissions', type_='foreignkey')
    op.drop_constraint(None, 'role_permissions', type_='foreignkey')
    op.drop_constraint(None, 'role_permissions', type_='foreignkey')
    op.create_foreign_key(op.f('role_permissions_role_id_fkey'), 'role_permissions', 'roles', ['role_id'], ['id'])
    op.create_foreign_key(op.f('role_permissions_permission_id_fkey'), 'role_permissions', 'permissions', ['permission_id'], ['id'])
    op.drop_column('role_permissions', 'granted_by')
    op.drop_column('role_permissions', 'granted_at')
    op.add_column('phi_access_logs', sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('phi_access_logs', sa.Column('purpose', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('phi_access_logs', sa.Column('accessed_fields', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'phi_access_logs', type_='foreignkey')
    op.drop_constraint(None, 'phi_access_logs', type_='foreignkey')
    op.drop_constraint(None, 'phi_access_logs', type_='foreignkey')
    op.drop_index(op.f('ix_phi_access_logs_user_id'), table_name='phi_access_logs')
    op.drop_index(op.f('ix_phi_access_logs_patient_id'), table_name='phi_access_logs')
    op.drop_index(op.f('ix_phi_access_logs_access_session_id'), table_name='phi_access_logs')
    op.drop_index('idx_user_access_audit', table_name='phi_access_logs')
    op.drop_index('idx_unusual_access', table_name='phi_access_logs')
    op.drop_index('idx_patient_access_audit', table_name='phi_access_logs')
    op.drop_index('idx_access_timestamp', table_name='phi_access_logs')
    op.create_index(op.f('idx_phi_access_patient_user'), 'phi_access_logs', ['patient_id', 'user_id'], unique=False)
    op.alter_column('phi_access_logs', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('phi_access_logs', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    # Convert INET back to VARCHAR in downgrade
    op.execute("ALTER TABLE phi_access_logs ALTER COLUMN ip_address TYPE VARCHAR(45) USING ip_address::text")
    op.drop_column('phi_access_logs', 'access_ended_at')
    op.drop_column('phi_access_logs', 'access_started_at')
    op.drop_column('phi_access_logs', 'flagged_for_review')
    op.drop_column('phi_access_logs', 'risk_score')
    op.drop_column('phi_access_logs', 'unusual_access_pattern')
    op.drop_column('phi_access_logs', 'supervisor_approval')
    op.drop_column('phi_access_logs', 'emergency_justification')
    op.drop_column('phi_access_logs', 'emergency_access')
    op.drop_column('phi_access_logs', 'retention_category')
    op.drop_column('phi_access_logs', 'data_classification')
    op.drop_column('phi_access_logs', 'minimum_necessary_applied')
    op.drop_column('phi_access_logs', 'consent_verified')
    op.drop_column('phi_access_logs', 'session_duration_ms')
    op.drop_column('phi_access_logs', 'user_agent')
    op.drop_column('phi_access_logs', 'data_hash')
    op.drop_column('phi_access_logs', 'data_returned')
    op.drop_column('phi_access_logs', 'denial_reason')
    op.drop_column('phi_access_logs', 'access_granted')
    op.drop_column('phi_access_logs', 'request_parameters')
    op.drop_column('phi_access_logs', 'request_path')
    op.drop_column('phi_access_logs', 'request_method')
    op.drop_column('phi_access_logs', 'legal_basis')
    op.drop_column('phi_access_logs', 'access_purpose')
    op.drop_column('phi_access_logs', 'phi_fields_accessed')
    op.drop_column('phi_access_logs', 'organization_id')
    op.drop_column('phi_access_logs', 'user_role')
    op.drop_column('phi_access_logs', 'consent_id')
    op.drop_column('phi_access_logs', 'clinical_document_id')
    op.drop_column('phi_access_logs', 'correlation_id')
    op.drop_column('phi_access_logs', 'access_session_id')
    op.add_column('permissions', sa.Column('resource_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('permissions', sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.drop_index('unique_resource_action', table_name='permissions')
    op.create_unique_constraint(op.f('permissions_name_key'), 'permissions', ['name'], postgresql_nulls_not_distinct=False)
    op.alter_column('permissions', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('permissions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('permissions', 'is_system_permission')
    op.drop_column('permissions', 'resource')
    op.add_column('patients', sa.Column('gender', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('patients', sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('patients', sa.Column('tenant_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('patients', sa.Column('organization_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'patients', type_='unique')
    op.create_index(op.f('ix_patients_tenant_id'), 'patients', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_patients_organization_id'), 'patients', ['organization_id'], unique=False)
    op.create_index(op.f('ix_patients_mrn'), 'patients', ['mrn'], unique=True)
    op.create_index(op.f('ix_patients_external_id'), 'patients', ['external_id'], unique=False)
    op.create_index(op.f('idx_patients_mrn'), 'patients', ['mrn'], unique=False)
    op.alter_column('patients', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('patients', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('patients', 'soft_deleted_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('patients', 'iris_last_sync_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('patients', 'consent_status',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('patients', 'date_of_birth_encrypted',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('patients', 'last_name_encrypted',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('patients', 'first_name_encrypted',
               existing_type=sa.TEXT(),
               nullable=True)
    op.add_column('immunizations', sa.Column('last_sync_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('immunizations', sa.Column('iris_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('immunizations', sa.Column('sync_status', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('immunizations', sa.Column('administrator', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('immunizations', sa.Column('administered_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.create_unique_constraint(op.f('immunizations_iris_id_key'), 'immunizations', ['iris_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('immunizations', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('immunizations', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('immunizations', 'vaccine_name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=500),
               nullable=False)
    op.alter_column('immunizations', 'vaccine_code',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.drop_column('immunizations', 'soft_deleted_at')
    op.drop_column('immunizations', 'data_source')
    op.drop_column('immunizations', 'iris_record_id')
    op.drop_column('immunizations', 'route')
    op.drop_column('immunizations', 'administration_site')
    op.drop_column('immunizations', 'administered_by')
    op.drop_column('immunizations', 'series_complete')
    op.drop_column('immunizations', 'dose_number')
    op.drop_column('immunizations', 'manufacturer')
    op.drop_column('immunizations', 'administration_date')
    op.drop_index('idx_patient_consent_status', table_name='consents')
    op.drop_index('idx_consent_effective_period', table_name='consents')
    op.alter_column('consents', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('consents', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('consents', 'signature_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.add_column('clinical_documents', sa.Column('fhir_resource_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'clinical_documents', type_='foreignkey')
    op.drop_index(op.f('ix_clinical_documents_patient_id'), table_name='clinical_documents')
    op.drop_index(op.f('ix_clinical_documents_document_type'), table_name='clinical_documents')
    op.drop_index('idx_patient_document_type', table_name='clinical_documents')
    op.drop_index('idx_document_created_at', table_name='clinical_documents')
    op.alter_column('clinical_documents', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('clinical_documents', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('clinical_documents', 'soft_deleted_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('clinical_documents', 'fhir_resource_type',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.drop_column('clinical_documents', 'retention_date')
    op.drop_column('clinical_documents', 'access_count')
    op.drop_column('clinical_documents', 'last_accessed_at')
    op.drop_column('clinical_documents', 'authorized_users')
    op.drop_column('clinical_documents', 'authorized_roles')
    op.drop_column('clinical_documents', 'created_by')
    op.drop_column('clinical_documents', 'custodian_reference')
    op.drop_column('clinical_documents', 'author_references')
    op.drop_column('clinical_documents', 'category')
    op.drop_column('clinical_documents', 'fhir_identifier')
    op.drop_column('clinical_documents', 'access_level')
    op.drop_column('clinical_documents', 'confidentiality_level')
    op.drop_column('clinical_documents', 'content_type')
    op.drop_column('clinical_documents', 'encounter_id')
    op.drop_column('clinical_documents', 'status')
    op.add_column('audit_logs', sa.Column('sequence_number', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('audit_logs', sa.Column('outcome', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'audit_logs', type_='foreignkey')
    op.create_index(op.f('ix_audit_logs_user_id'), 'audit_logs', ['user_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_timestamp'), 'audit_logs', ['timestamp'], unique=False)
    op.create_index(op.f('ix_audit_logs_event_type'), 'audit_logs', ['event_type'], unique=False)
    op.create_index(op.f('idx_audit_logs_timestamp_user'), 'audit_logs', ['timestamp', 'user_id'], unique=False)
    op.create_index(op.f('idx_audit_logs_event_type_timestamp'), 'audit_logs', ['event_type', 'timestamp'], unique=False)
    op.alter_column('audit_logs', 'data_classification',
               existing_type=postgresql.ENUM('public', 'internal', 'confidential', 'restricted', 'phi', 'pii', name='dataclassification'),
               nullable=False)
    op.alter_column('audit_logs', 'config_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('audit_logs', 'request_method',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=10),
               existing_nullable=True)
    # Convert INET back to VARCHAR in downgrade for audit_logs
    op.execute("ALTER TABLE audit_logs ALTER COLUMN ip_address TYPE VARCHAR(45) USING ip_address::text")
    op.alter_column('audit_logs', 'timestamp',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('audit_logs', 'result')
    op.add_column('api_requests', sa.Column('request_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('api_requests', sa.Column('endpoint', sa.VARCHAR(length=500), autoincrement=False, nullable=False))
    op.add_column('api_requests', sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('api_requests', sa.Column('status_code', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'api_requests', type_='foreignkey')
    op.drop_constraint(None, 'api_requests', type_='foreignkey')
    op.create_unique_constraint(op.f('api_requests_request_id_key'), 'api_requests', ['request_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('api_requests', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('api_requests', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    # Convert INET back to VARCHAR in downgrade for api_requests
    op.execute("ALTER TABLE api_requests ALTER COLUMN ip_address TYPE VARCHAR(45) USING ip_address::text")
    op.alter_column('api_requests', 'method',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=10),
               existing_nullable=False)
    op.drop_column('api_requests', 'completed_at')
    op.drop_column('api_requests', 'user_agent')
    op.drop_column('api_requests', 'error_stack_trace')
    op.drop_column('api_requests', 'error_message')
    op.drop_column('api_requests', 'total_duration_ms')
    op.drop_column('api_requests', 'attempt_count')
    op.drop_column('api_requests', 'response_body')
    op.drop_column('api_requests', 'response_headers')
    op.drop_column('api_requests', 'response_status_code')
    op.drop_column('api_requests', 'request_hash')
    op.drop_column('api_requests', 'request_body')
    op.drop_column('api_requests', 'request_headers')
    op.drop_column('api_requests', 'endpoint_path')
    op.drop_column('api_requests', 'correlation_id')
    op.drop_column('api_requests', 'api_endpoint_id')
    op.add_column('api_endpoints', sa.Column('rate_limit', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('api_endpoints', sa.Column('is_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('api_endpoints', sa.Column('method', sa.VARCHAR(length=10), autoincrement=False, nullable=False))
    op.add_column('api_endpoints', sa.Column('required_permissions', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('api_endpoints', sa.Column('path', sa.VARCHAR(length=500), autoincrement=False, nullable=False))
    op.add_column('api_endpoints', sa.Column('requires_auth', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'api_endpoints', type_='unique')
    op.alter_column('api_endpoints', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('api_endpoints', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('api_endpoints', 'config_metadata')
    op.drop_column('api_endpoints', 'last_health_check_status')
    op.drop_column('api_endpoints', 'last_health_check_at')
    op.drop_column('api_endpoints', 'health_check_interval_seconds')
    op.drop_column('api_endpoints', 'health_check_endpoint')
    op.drop_column('api_endpoints', 'ssl_verify')
    op.drop_column('api_endpoints', 'circuit_breaker_timeout_seconds')
    op.drop_column('api_endpoints', 'circuit_breaker_threshold')
    op.drop_column('api_endpoints', 'retry_delay_seconds')
    op.drop_column('api_endpoints', 'retry_attempts')
    op.drop_column('api_endpoints', 'timeout_seconds')
    op.drop_column('api_endpoints', 'rate_limit_window_seconds')
    op.drop_column('api_endpoints', 'rate_limit_requests')
    op.drop_column('api_endpoints', 'auth_type')
    op.drop_column('api_endpoints', 'status')
    op.drop_column('api_endpoints', 'api_version')
    op.drop_column('api_endpoints', 'base_url')
    op.drop_column('api_endpoints', 'name')
    op.add_column('api_credentials', sa.Column('rate_limit', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('api_credentials', sa.Column('api_key_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('api_credentials', sa.Column('last_used_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('api_credentials', sa.Column('secret_key_encrypted', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('api_credentials', sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('api_credentials', sa.Column('allowed_endpoints', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'api_credentials', type_='foreignkey')
    op.drop_constraint(None, 'api_credentials', type_='foreignkey')
    op.drop_index('unique_endpoint_credential', table_name='api_credentials')
    op.alter_column('api_credentials', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('api_credentials', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('api_credentials', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.drop_column('api_credentials', 'created_by')
    op.drop_column('api_credentials', 'rotation_reminder_at')
    op.drop_column('api_credentials', 'last_rotated_at')
    op.drop_column('api_credentials', 'encrypted_value')
    op.drop_column('api_credentials', 'credential_name')
    op.drop_column('api_credentials', 'api_endpoint_id')
    op.create_table('document_shares',
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('shared_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('shared_with', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('share_token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('accessed_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_accessed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('revoked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('revoked_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['document_storage.id'], name=op.f('document_shares_document_id_fkey')),
    sa.ForeignKeyConstraint(['revoked_by'], ['users.id'], name=op.f('document_shares_revoked_by_fkey')),
    sa.ForeignKeyConstraint(['shared_by'], ['users.id'], name=op.f('document_shares_shared_by_fkey')),
    sa.ForeignKeyConstraint(['shared_with'], ['users.id'], name=op.f('document_shares_shared_with_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('document_shares_pkey')),
    sa.UniqueConstraint('share_token', name=op.f('document_shares_share_token_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_document_shares_shared_with'), 'document_shares', ['shared_with'], unique=False)
    op.create_index(op.f('ix_document_shares_revoked_at'), 'document_shares', ['revoked_at'], unique=False)
    op.create_index(op.f('ix_document_shares_expires_at'), 'document_shares', ['expires_at'], unique=False)
    op.create_index(op.f('ix_document_shares_document_id'), 'document_shares', ['document_id'], unique=False)
    op.create_table('clinical_encounters',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workflow_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('patient_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('encounter_class', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('encounter_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('encounter_type_code', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('encounter_type_display', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('encounter_type_system', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('service_type_code', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('service_type_display', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('subjective_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('objective_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('assessment_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('plan_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('history_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('examination_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('procedures_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('medications_administered_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('vital_signs_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('allergies_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('current_medications_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('diagnosis_codes_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('procedure_codes_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('encounter_datetime', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('arrival_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('length_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('facility', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('department', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('room', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('bed', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('attending_provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('referring_provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('consulting_providers', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('fhir_encounter_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('fhir_version', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('fhir_profile', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('fhir_last_updated', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('documentation_complete', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('quality_measures_met', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('care_gaps_identified', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('disposition', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('outcome', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('follow_up_required', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('follow_up_instructions_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_classification', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('consent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('consent_verified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('last_modified_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('documentation_locked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('locked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('locked_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('soft_deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("encounter_class::text = ANY (ARRAY['AMB'::character varying, 'EMER'::character varying, 'IMP'::character varying, 'HH'::character varying, 'VR'::character varying]::text[])", name=op.f('valid_encounter_class')),
    sa.CheckConstraint("encounter_status::text = ANY (ARRAY['planned'::character varying, 'arrived'::character varying, 'triaged'::character varying, 'in-progress'::character varying, 'onleave'::character varying, 'finished'::character varying, 'cancelled'::character varying]::text[])", name=op.f('valid_encounter_status')),
    sa.ForeignKeyConstraint(['attending_provider_id'], ['users.id'], name=op.f('clinical_encounters_attending_provider_id_fkey')),
    sa.ForeignKeyConstraint(['consent_id'], ['consents.id'], name=op.f('clinical_encounters_consent_id_fkey')),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('clinical_encounters_created_by_fkey')),
    sa.ForeignKeyConstraint(['last_modified_by'], ['users.id'], name=op.f('clinical_encounters_last_modified_by_fkey')),
    sa.ForeignKeyConstraint(['locked_by'], ['users.id'], name=op.f('clinical_encounters_locked_by_fkey')),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name=op.f('clinical_encounters_patient_id_fkey')),
    sa.ForeignKeyConstraint(['provider_id'], ['users.id'], name=op.f('clinical_encounters_provider_id_fkey')),
    sa.ForeignKeyConstraint(['referring_provider_id'], ['users.id'], name=op.f('clinical_encounters_referring_provider_id_fkey')),
    sa.ForeignKeyConstraint(['workflow_id'], ['clinical_workflows.id'], name=op.f('clinical_encounters_workflow_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('clinical_encounters_pkey')),
    sa.UniqueConstraint('fhir_encounter_id', name=op.f('clinical_encounters_fhir_encounter_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_encounter_provider_date'), 'clinical_encounters', ['provider_id', 'encounter_datetime'], unique=False)
    op.create_index(op.f('idx_encounter_patient_date'), 'clinical_encounters', ['patient_id', 'encounter_datetime'], unique=False)
    op.create_index(op.f('idx_encounter_fhir_id'), 'clinical_encounters', ['fhir_encounter_id'], unique=False)
    op.create_index(op.f('idx_encounter_class_status'), 'clinical_encounters', ['encounter_class', 'encounter_status'], unique=False)
    op.create_table('compliance_reports',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('report_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('reporting_period_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('reporting_period_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('generated_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('summary', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('findings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recommendations', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('total_events_analyzed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_sources', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('export_format', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=512), autoincrement=False, nullable=True),
    sa.Column('file_size_bytes', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('compliance_reports_pkey'))
    )
    op.create_index(op.f('ix_compliance_reports_status'), 'compliance_reports', ['status'], unique=False)
    op.create_index(op.f('ix_compliance_reports_report_type'), 'compliance_reports', ['report_type'], unique=False)
    op.create_index(op.f('ix_compliance_reports_created_at'), 'compliance_reports', ['created_at'], unique=False)
    op.create_table('iris_api_logs',
    sa.Column('request_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('endpoint', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('method', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('request_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('iris_api_logs_pkey')),
    sa.UniqueConstraint('request_id', name=op.f('iris_api_logs_request_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('clinical_workflow_steps',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workflow_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('step_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('step_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('step_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('step_data_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('instructions_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('observations_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('decisions_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('actions_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('estimated_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('actual_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quality_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('completion_quality', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('requires_review', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('review_completed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('prerequisites', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('dependencies', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('blocking_issues', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('completed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reviewed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('data_classification', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('collect_for_ai_training', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('ai_training_category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'in_progress'::character varying, 'completed'::character varying, 'skipped'::character varying, 'failed'::character varying]::text[])", name=op.f('valid_step_status')),
    sa.CheckConstraint('step_order >= 1', name=op.f('valid_step_order')),
    sa.ForeignKeyConstraint(['completed_by'], ['users.id'], name=op.f('clinical_workflow_steps_completed_by_fkey')),
    sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'], name=op.f('clinical_workflow_steps_reviewed_by_fkey')),
    sa.ForeignKeyConstraint(['workflow_id'], ['clinical_workflows.id'], name=op.f('clinical_workflow_steps_workflow_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('clinical_workflow_steps_pkey'))
    )
    op.create_index(op.f('idx_step_workflow_order'), 'clinical_workflow_steps', ['workflow_id', 'step_order'], unique=False)
    op.create_index(op.f('idx_step_type_completed'), 'clinical_workflow_steps', ['step_type', 'completed_at'], unique=False)
    op.create_index(op.f('idx_step_status_started'), 'clinical_workflow_steps', ['status', 'started_at'], unique=False)
    op.create_table('clinical_workflows',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('patient_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('workflow_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('workflow_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('external_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('chief_complaint_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('history_present_illness_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('review_of_systems_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('physical_examination_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('assessment_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('plan_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('vital_signs_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('allergies_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('medications_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('diagnosis_codes_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('procedure_codes_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lab_orders_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('clinical_alerts_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('recommendations_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('quality_measures_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('fhir_encounter_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('fhir_version', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('fhir_profile', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('fhir_last_updated', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('workflow_start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('workflow_end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('estimated_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('actual_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('department', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('room_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data_classification', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('encryption_key_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('anonymized_version_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('consent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('consent_verified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('authorization_codes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('quality_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('completion_percentage', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('documentation_quality', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('last_modified_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('last_accessed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('last_accessed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('access_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('parent_workflow_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('soft_deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("priority::text = ANY (ARRAY['routine'::character varying, 'urgent'::character varying, 'emergency'::character varying, 'stat'::character varying]::text[])", name='valid_workflow_priority'),
    sa.CheckConstraint("status::text = ANY (ARRAY['active'::character varying, 'completed'::character varying, 'cancelled'::character varying, 'suspended'::character varying]::text[])", name='valid_workflow_status'),
    sa.CheckConstraint('completion_percentage >= 0 AND completion_percentage <= 100', name='valid_completion_percentage'),
    sa.ForeignKeyConstraint(['consent_id'], ['consents.id'], name='clinical_workflows_consent_id_fkey'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='clinical_workflows_created_by_fkey'),
    sa.ForeignKeyConstraint(['last_accessed_by'], ['users.id'], name='clinical_workflows_last_accessed_by_fkey'),
    sa.ForeignKeyConstraint(['last_modified_by'], ['users.id'], name='clinical_workflows_last_modified_by_fkey'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='clinical_workflows_organization_id_fkey'),
    sa.ForeignKeyConstraint(['parent_workflow_id'], ['clinical_workflows.id'], name='clinical_workflows_parent_workflow_id_fkey'),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name='clinical_workflows_patient_id_fkey'),
    sa.ForeignKeyConstraint(['provider_id'], ['users.id'], name='clinical_workflows_provider_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='clinical_workflows_pkey'),
    sa.UniqueConstraint('workflow_number', name='clinical_workflows_workflow_number_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_workflow_type_priority'), 'clinical_workflows', ['workflow_type', 'priority'], unique=False)
    op.create_index(op.f('idx_workflow_status_priority'), 'clinical_workflows', ['status', 'priority'], unique=False)
    op.create_index(op.f('idx_workflow_patient_provider'), 'clinical_workflows', ['patient_id', 'provider_id'], unique=False)
    op.create_index(op.f('idx_workflow_fhir_id'), 'clinical_workflows', ['fhir_encounter_id'], unique=False)
    op.create_index(op.f('idx_workflow_data_classification'), 'clinical_workflows', ['data_classification'], unique=False)
    op.create_table('document_storage',
    sa.Column('patient_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('original_filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('storage_path', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('storage_bucket', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('file_size_bytes', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mime_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('hash_sha256', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('encryption_key_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('document_type', postgresql.ENUM('LAB_RESULT', 'IMAGING', 'DICOM_IMAGE', 'DICOM_SERIES', 'DICOM_STUDY', 'CLINICAL_NOTE', 'PRESCRIPTION', 'DISCHARGE_SUMMARY', 'OPERATIVE_REPORT', 'PATHOLOGY_REPORT', 'RADIOLOGY_REPORT', 'CONSULTATION_NOTE', 'PROGRESS_NOTE', 'MEDICATION_LIST', 'ALLERGY_LIST', 'VITAL_SIGNS', 'INSURANCE_CARD', 'IDENTIFICATION_DOCUMENT', 'CONSENT_FORM', 'REFERRAL', 'OTHER', name='documenttype'), autoincrement=False, nullable=False),
    sa.Column('document_category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('auto_classification_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('extracted_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('document_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('parent_document_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_latest_version', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('uploaded_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('access_log_ids', postgresql.ARRAY(sa.UUID()), autoincrement=False, nullable=True),
    sa.Column('compliance_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('orthanc_instance_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('orthanc_series_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('orthanc_study_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('dicom_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.CheckConstraint('auto_classification_confidence IS NULL OR auto_classification_confidence >= 0::double precision AND auto_classification_confidence <= 100::double precision', name='valid_confidence'),
    sa.CheckConstraint('file_size_bytes > 0', name='valid_file_size'),
    sa.CheckConstraint('version > 0', name='valid_version'),
    sa.ForeignKeyConstraint(['parent_document_id'], ['document_storage.id'], name='document_storage_parent_document_id_fkey'),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name='document_storage_patient_id_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='document_storage_updated_by_fkey'),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.id'], name='document_storage_uploaded_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='document_storage_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_document_storage_patient_id'), 'document_storage', ['patient_id'], unique=False)
    op.create_index(op.f('ix_document_storage_orthanc_study_id'), 'document_storage', ['orthanc_study_id'], unique=False)
    op.create_index(op.f('ix_document_storage_orthanc_series_id'), 'document_storage', ['orthanc_series_id'], unique=False)
    op.create_index(op.f('ix_document_storage_orthanc_instance_id'), 'document_storage', ['orthanc_instance_id'], unique=False)
    op.create_index(op.f('ix_document_storage_hash_sha256'), 'document_storage', ['hash_sha256'], unique=False)
    op.create_index(op.f('ix_document_storage_document_type'), 'document_storage', ['document_type'], unique=False)
    op.create_table('clinical_workflow_audit',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workflow_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('event_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_role', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('request_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('field_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('old_value_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('new_value_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('change_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('phi_accessed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('phi_fields_accessed', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('access_purpose', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('consent_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('compliance_tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('retention_period_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('legal_hold', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('processing_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('audit_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('previous_audit_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('risk_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('anomaly_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.CheckConstraint("risk_level::text = ANY (ARRAY['low'::character varying, 'medium'::character varying, 'high'::character varying, 'critical'::character varying]::text[])", name=op.f('valid_risk_level')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('clinical_workflow_audit_user_id_fkey')),
    sa.ForeignKeyConstraint(['workflow_id'], ['clinical_workflows.id'], name=op.f('clinical_workflow_audit_workflow_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('clinical_workflow_audit_pkey'))
    )
    op.create_index(op.f('idx_audit_workflow_timestamp'), 'clinical_workflow_audit', ['workflow_id', 'timestamp'], unique=False)
    op.create_index(op.f('idx_audit_user_timestamp'), 'clinical_workflow_audit', ['user_id', 'timestamp'], unique=False)
    op.create_index(op.f('idx_audit_risk_level'), 'clinical_workflow_audit', ['risk_level', 'timestamp'], unique=False)
    op.create_index(op.f('idx_audit_phi_access'), 'clinical_workflow_audit', ['phi_accessed', 'timestamp'], unique=False)
    op.create_index(op.f('idx_audit_event_type'), 'clinical_workflow_audit', ['event_type', 'timestamp'], unique=False)
    op.create_table('document_access_audit',
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('action', postgresql.ENUM('UPLOAD', 'VIEW', 'DOWNLOAD', 'UPDATE', 'DELETE', 'SHARE', 'PRINT', 'CLASSIFY', 'EXTRACT_TEXT', 'VERSION_CREATE', name='documentaction'), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('accessed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('previous_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('current_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('block_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('request_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['document_storage.id'], name=op.f('document_access_audit_document_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('document_access_audit_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('document_access_audit_pkey')),
    sa.UniqueConstraint('current_hash', name=op.f('document_access_audit_current_hash_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_document_access_audit_user_id'), 'document_access_audit', ['user_id'], unique=False)
    op.create_index(op.f('ix_document_access_audit_document_id'), 'document_access_audit', ['document_id'], unique=False)
    op.create_index(op.f('ix_document_access_audit_block_number'), 'document_access_audit', ['block_number'], unique=False)
    op.create_index(op.f('ix_document_access_audit_action'), 'document_access_audit', ['action'], unique=False)
    op.create_index(op.f('ix_document_access_audit_accessed_at'), 'document_access_audit', ['accessed_at'], unique=False)
    op.create_table('organizations',
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('external_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('organization_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('address_line1', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('address_line2', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('organizations_pkey'))
    )
    op.create_table('purge_policies',
    sa.Column('resource_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('retention_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('approved_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('purge_policies_pkey'))
    )
    op.create_index(op.f('ix_purge_policies_resource_type'), 'purge_policies', ['resource_type'], unique=False)
    # ### end Alembic commands ###