version: '3.8'

services:
  # Enterprise PostgreSQL with SSL
  db:
    image: postgres:15-alpine
    container_name: iris_postgres_enterprise
    environment:
      POSTGRES_DB: iris_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      # Enable SSL in PostgreSQL
      POSTGRES_INITDB_ARGS: "--auth=scram-sha-256 --auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres-ssl:/var/lib/postgresql/ssl:ro
    command: >
      postgres
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/ssl/server.crt
      -c ssl_key_file=/var/lib/postgresql/ssl/server.key
      -c ssl_ca_file=/var/lib/postgresql/ssl/ca.crt
      -c ssl_ciphers='ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384'
      -c ssl_prefer_server_ciphers=on
      -c ssl_min_protocol_version='TLSv1.2'
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
      -c log_destination='stderr'
      -c logging_collector=on
      -c log_directory='log'
      -c log_filename='postgresql-%Y-%m-%d_%H%M%S.log'
      -c log_statement='all'
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
      -c log_temp_files=0
      -c log_checkpoints=on
      -c log_autovacuum_min_duration=0
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d iris_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - healthcare_network

  # Enterprise Redis with SSL/TLS
  redis:
    image: redis:7-alpine
    container_name: iris_redis_enterprise
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis-ssl:/tls:ro
    command: >
      redis-server
      --requirepass "enterprise_redis_password_change_in_production"
      --tls-port 6380
      --port 0
      --tls-cert-file /tls/redis.crt
      --tls-key-file /tls/redis.key
      --tls-ca-cert-file /tls/ca.crt
      --tls-dh-params-file /tls/redis.dh
      --tls-protocols "TLSv1.2 TLSv1.3"
      --tls-ciphers "ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS"
      --tls-prefer-server-ciphers yes
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --databases 16
    healthcheck:
      test: ["CMD", "redis-cli", "--tls", "--cert", "/tls/redis.crt", "--key", "/tls/redis.key", "--cacert", "/tls/ca.crt", "-p", "6380", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - healthcare_network

  # Enterprise MinIO for HIPAA-compliant object storage
  minio:
    image: minio/minio:latest
    container_name: iris_minio_enterprise
    environment:
      MINIO_ROOT_USER: minio_admin
      MINIO_ROOT_PASSWORD: enterprise_minio_password_change_in_production
      MINIO_SERVER_URL: https://localhost:9000
      MINIO_BROWSER_REDIRECT_URL: https://localhost:9001
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
      - ./minio-ssl:/certs:ro
    command: >
      server /data
      --console-address ":9001"
      --certs-dir /certs
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - healthcare_network

  # Enterprise Monitoring - Prometheus with HTTPS
  prometheus:
    image: prom/prometheus:latest
    container_name: iris_prometheus_enterprise
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
      - ./prometheus-ssl:/etc/ssl/certs:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://localhost:9090'
      - '--web.listen-address=0.0.0.0:9090'
    networks:
      - healthcare_network

  # Enterprise Grafana with HTTPS
  grafana:
    image: grafana/grafana:latest
    container_name: iris_grafana_enterprise
    environment:
      GF_SECURITY_ADMIN_PASSWORD: enterprise_grafana_password_change_in_production
      GF_SERVER_PROTOCOL: https
      GF_SERVER_CERT_FILE: /etc/ssl/certs/grafana.crt
      GF_SERVER_CERT_KEY: /etc/ssl/certs/grafana.key
      GF_SERVER_ROOT_URL: https://localhost:3001
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: strict
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "true"
      GF_SECURITY_CONTENT_TYPE_PROTECTION: "true"
      GF_SECURITY_X_CONTENT_TYPE_OPTIONS: nosniff
      GF_SECURITY_X_XSS_PROTECTION: "true"
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
      - ./grafana-ssl:/etc/ssl/certs:ro
    networks:
      - healthcare_network

networks:
  healthcare_network:
    driver: bridge
    enable_ipv6: false
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local