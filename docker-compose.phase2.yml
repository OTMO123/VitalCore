version: '3.8'

services:
  # MILVUS VECTOR DATABASE STACK
  milvus-etcd:
    container_name: iris_milvus_etcd_p2
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - iris_network
    restart: unless-stopped

  milvus-minio:
    container_name: iris_milvus_minio_p2
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - milvus_minio_data:/minio_data
    command: minio server /minio_data
    ports:
      - "9002:9000"
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  milvus-standalone:
    container_name: iris_milvus_vector_p2
    image: milvusdb/milvus:v2.3.4
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: milvus-etcd:2379
      MINIO_ADDRESS: milvus-minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "milvus-etcd"
      - "milvus-minio"
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/health"]
      interval: 30s
      timeout: 20s
      retries: 5
    restart: unless-stopped

  # ORTHANC DICOM SERVER
  postgres-orthanc:
    image: postgres:15-alpine
    container_name: iris_postgres_orthanc_p2
    environment:
      POSTGRES_DB: orthanc_db
      POSTGRES_USER: orthanc_user
      POSTGRES_PASSWORD: orthanc_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_orthanc_data:/var/lib/postgresql/data
    networks:
      - iris_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orthanc_user -d orthanc_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  orthanc:
    image: orthancteam/orthanc:24.6.1
    container_name: iris_orthanc_p2
    environment:
      - ORTHANC__AUTHENTICATION_ENABLED=true
      - 'ORTHANC__REGISTERED_USERS={"admin":"admin123","iris_api":"iris_key"}'
      - ORTHANC__POSTGRESQL__HOST=postgres-orthanc
      - ORTHANC__POSTGRESQL__PORT=5432
      - ORTHANC__POSTGRESQL__DATABASE=orthanc_db
      - ORTHANC__POSTGRESQL__USERNAME=orthanc_user
      - ORTHANC__POSTGRESQL__PASSWORD=orthanc_password
      - ORTHANC__POSTGRESQL__ENABLE_STORAGE=true
      - ORTHANC__POSTGRESQL__ENABLE_INDEX=true
      - ORTHANC__DICOM_AET=IRIS_ORTHANC
      - ORTHANC__DICOM_PORT=4242
    ports:
      - "8042:8042"
      - "4242:4242"
    volumes:
      - orthanc_data:/var/lib/orthanc/db
    depends_on:
      postgres-orthanc:
        condition: service_healthy
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8042/system"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # MACHINE LEARNING SERVICES
  tensorflow-serving:
    image: tensorflow/serving:2.13.0
    container_name: iris_tensorflow_p2
    environment:
      - MODEL_CONFIG_FILE=/models/models.config
      - MODEL_CONFIG_FILE_POLL_WAIT_SECONDS=60
    ports:
      - "8501:8501"
      - "8500:8500"
    volumes:
      - ./ml_models:/models:ro
    networks:
      - iris_network
    restart: unless-stopped

  jupyter:
    image: jupyter/tensorflow-notebook:python-3.10
    container_name: iris_jupyter_p2
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=iris_notebook_token
    ports:
      - "8888:8888"
    volumes:
      - jupyter_data:/home/jovyan/work
      - ./ml_models:/home/jovyan/models
    networks:
      - iris_network
    restart: unless-stopped

  # ENHANCED APPLICATION WITH PHASE 2 CAPABILITIES
  app-enhanced:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: iris_app_enhanced_p2
    environment:
      - DEBUG=false
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DATABASE_URL=postgresql://postgres:password@iris_postgres_p1:5432/iris_db
      - REDIS_URL=redis://:redis_password@iris_redis_p1:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - PHI_ENCRYPTION_KEY=${PHI_ENCRYPTION_KEY}
      - MILVUS_HOST=milvus-standalone
      - MILVUS_PORT=19530
      - ORTHANC_URL=http://orthanc:8042
      - ORTHANC_USERNAME=iris_api
      - ORTHANC_PASSWORD=iris_key
      - TENSORFLOW_SERVING_URL=http://tensorflow-serving:8501
      - SOC2_COMPLIANCE_MODE=true
      - AUDIT_SIGNING_KEY=${AUDIT_SIGNING_KEY}
      - DEPLOYMENT_PHASE=2
      - VECTOR_DB_ENABLED=true
      - DICOM_ENABLED=true
      - ML_MODELS_ENABLED=true
    ports:
      - "8001:8000"
    volumes:
      - ./logs:/app/logs
    networks:
      - iris_network
    external_links:
      - iris_postgres_p1:postgres
      - iris_redis_p1:redis
      - iris_minio_p1:minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  etcd_data:
  milvus_minio_data:
  milvus_data:
  postgres_orthanc_data:
  orthanc_data:
  jupyter_data:

networks:
  iris_network:
    external: true