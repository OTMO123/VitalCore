# üöÄ Working Enterprise Healthcare Platform - Verified Images Only
# Phase 1: Core services with verified Docker images

version: '3.8'

services:
  # üóÑÔ∏è Core Database Services
  postgres:
    image: postgres:15-alpine
    container_name: iris_postgres
    environment:
      POSTGRES_DB: iris_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - iris_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d iris_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: iris_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # üì¶ Object Storage
  minio:
    image: minio/minio:latest
    container_name: iris_minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minio123secure}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # ü§ñ Vector Database - Milvus Standalone (Verified)
  milvus-etcd:
    container_name: iris_milvus_etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - iris_network
    restart: unless-stopped

  milvus-minio:
    container_name: iris_milvus_minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: ${MILVUS_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MILVUS_SECRET_KEY:-minioadmin}
    volumes:
      - milvus_minio_data:/minio_data
    command: minio server /minio_data
    ports:
      - "9002:9000"
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  milvus-standalone:
    container_name: iris_milvus_vector
    image: milvusdb/milvus:v2.3.4-gpu
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: milvus-etcd:2379
      MINIO_ADDRESS: milvus-minio:9000
      MINIO_ACCESS_KEY: ${MILVUS_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MILVUS_SECRET_KEY:-minioadmin}
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "milvus-etcd"
      - "milvus-minio"
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/health"]
      interval: 30s
      timeout: 20s
      retries: 5
    restart: unless-stopped

  # üè• Medical Imaging - Orthanc (Fixed version)
  orthanc:
    image: orthancteam/orthanc:24.6.1
    container_name: iris_orthanc
    environment:
      - ORTHANC__AUTHENTICATION_ENABLED=true
      - ORTHANC__REGISTERED_USERS={"admin":"${ORTHANC_PASSWORD:-admin123}"}
      - ORTHANC__DICOM_AET=IRIS_ORTHANC
    ports:
      - "8042:8042"
      - "4242:4242"
    volumes:
      - orthanc_data:/var/lib/orthanc/db
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8042/system"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # üìä Basic Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: iris_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - iris_network
    restart: unless-stopped

  # üöÄ Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: iris_app
    environment:
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DATABASE_URL=postgresql://postgres:${DATABASE_PASSWORD:-password}@postgres:5432/iris_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - PHI_ENCRYPTION_KEY=${PHI_ENCRYPTION_KEY}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minio123secure}
      - MINIO_ENDPOINT=minio:9000
      - MILVUS_HOST=milvus-standalone
      - MILVUS_PORT=19530
      - ORTHANC_URL=http://orthanc:8042
      - SOC2_COMPLIANCE_MODE=true
      - AUDIT_SIGNING_KEY=${AUDIT_SIGNING_KEY}
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # üîß Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: iris_celery_worker
    environment:
      - DEBUG=${DEBUG:-false}
      - DATABASE_URL=postgresql://postgres:${DATABASE_PASSWORD:-password}@postgres:5432/iris_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - iris_network
    command: ["celery", "-A", "app.core.tasks", "worker", "--loglevel=info"]
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  etcd_data:
  milvus_minio_data:
  milvus_data:
  orthanc_data:
  prometheus_data:

networks:
  iris_network:
    driver: bridge