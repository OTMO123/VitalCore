services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: iris_postgres
    environment:
      POSTGRES_DB: iris_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./init-enterprise.sql:/docker-entrypoint-initdb.d/02-enterprise.sql:ro
    networks:
      - vitalcore-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for background tasks and caching
  redis:
    image: redis:7-alpine
    container_name: iris_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vitalcore-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Main FastAPI application
  app:
    build: .
    container_name: iris_app
    environment:
      - DEBUG=true
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:password@db:5432/iris_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=development-secret-key-change-in-production
      - ENCRYPTION_KEY=development-encryption-key-change-in-production
      - FRONTEND_URL=http://frontend:3000
      - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000,http://127.0.0.1:3000
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vitalcore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # VitalCore Frontend Service (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: vitalcore_frontend
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://app:8000
      - VITE_WS_URL=ws://app:8000/ws
      - VITE_ENABLE_VOICE_RECOGNITION=true
      - VITE_ENABLE_AI_FEATURES=true
      - VITE_ENABLE_SPECIALIST_MODE=true
    ports:
      - "5173:5173"  # Vite dev server port
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules  # Prevent overwriting node_modules
    depends_on:
      - app
    networks:
      - vitalcore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0", "--port", "5173", "--config", "vite.config.docker.ts"]

  # Celery worker for background tasks
  worker:
    build: .
    container_name: iris_worker
    environment:
      - DEBUG=true
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:password@db:5432/iris_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=development-secret-key-change-in-production
      - ENCRYPTION_KEY=development-encryption-key-change-in-production
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vitalcore-network
    command: ["celery", "-A", "app.core.tasks", "worker", "--loglevel=info"]

  # Celery beat scheduler
  scheduler:
    build: .
    container_name: iris_scheduler
    environment:
      - DEBUG=true
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:password@db:5432/iris_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=development-secret-key-change-in-production
      - ENCRYPTION_KEY=development-encryption-key-change-in-production
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vitalcore-network
    command: ["celery", "-A", "app.core.tasks", "beat", "--loglevel=info"]

  # MinIO object storage for documents
  minio:
    image: minio/minio:latest
    container_name: iris_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minio123secure
      MINIO_KMS_SECRET_KEY: my-minio-key:OSMM+vkIiXEQKs4K1bL7YYjHp8xQIm9xJFf/F1lPdg0=
      MINIO_REGION: us-east-1
      MINIO_COMPRESSION_ENABLE: "on"
      MINIO_COMPRESSION_EXTENSIONS: .pdf,.doc,.docx,.txt,.jpg,.png,.dicom
      MINIO_SCANNER: "on"
    ports:
      - "9000:9000"
      - "9001:9001"  # Console port
    volumes:
      - minio_data:/data
    networks:
      - vitalcore-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: vitalcore_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - app
    networks:
      - vitalcore-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  frontend_node_modules:

networks:
  vitalcore-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16