# üöÄ Complete Enterprise ML/AI Healthcare Platform
# Includes Vector Database, Orthanc DICOM, ML Services, and Full Monitoring Stack
# Production-ready with HIPAA/SOC2 compliance

version: '3.8'

services:
  # üìä Core Database Services
  # =======================
  
  # PostgreSQL - Main Application Database
  postgres:
    image: postgres:15-alpine
    container_name: iris_postgres_main
    environment:
      POSTGRES_DB: iris_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--auth=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_main_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - iris_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d iris_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # PostgreSQL - Orthanc DICOM Database  
  postgres_orthanc:
    image: postgres:15-alpine
    container_name: iris_postgres_orthanc
    environment:
      POSTGRES_DB: orthanc_db
      POSTGRES_USER: orthanc_user
      POSTGRES_PASSWORD: ${ORTHANC_DB_PASSWORD:-orthanc_secure_password}
    ports:
      - "5433:5432"
    volumes:
      - postgres_orthanc_data:/var/lib/postgresql/data
    networks:
      - iris_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orthanc_user -d orthanc_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis - Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: iris_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # ü§ñ ML/AI Database Services
  # ===========================

  # Milvus Vector Database - Enterprise Vector Search
  milvus-etcd:
    container_name: iris_milvus_etcd
    image: quay.io/coreos/etcd:v3.5.0
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - milvus_etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - iris_network
    restart: unless-stopped

  milvus-minio:
    container_name: iris_milvus_minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: ${MILVUS_MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MILVUS_MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - milvus_minio_data:/minio_data
    command: minio server /minio_data
    ports:
      - "9002:9000"
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  milvus-standalone:
    container_name: iris_milvus_vector_db
    image: milvusdb/milvus:v2.3.7
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: milvus-etcd:2379
      MINIO_ADDRESS: milvus-minio:9000
      MINIO_ACCESS_KEY: ${MILVUS_MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MILVUS_MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - milvus_standalone_data:/var/lib/milvus
    ports:
      - "19530:19530"  # Milvus gRPC port
      - "9091:9091"    # Milvus REST API port
    depends_on:
      - "milvus-etcd"
      - "milvus-minio"
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/health"]
      interval: 30s
      timeout: 20s
      retries: 5
    restart: unless-stopped

  # üè• Medical Imaging Services
  # ============================

  # Orthanc DICOM Server
  orthanc:
    image: osimis/orthanc:24.7.3
    container_name: iris_orthanc_dicom
    environment:
      # Security Configuration
      - ORTHANC__AUTHENTICATION_ENABLED=true
      - ORTHANC__REGISTERED_USERS={"admin":"${ORTHANC_ADMIN_PASSWORD:-admin123}","iris_api":"${ORTHANC_API_KEY:-secure_iris_key}"}
      - ORTHANC__REMOTE_ACCESS_ALLOWED=false
      
      # PostgreSQL Configuration
      - ORTHANC__POSTGRESQL__HOST=postgres_orthanc
      - ORTHANC__POSTGRESQL__PORT=5432
      - ORTHANC__POSTGRESQL__DATABASE=orthanc_db
      - ORTHANC__POSTGRESQL__USERNAME=orthanc_user
      - ORTHANC__POSTGRESQL__PASSWORD=${ORTHANC_DB_PASSWORD:-orthanc_secure_password}
      - ORTHANC__POSTGRESQL__ENABLE_STORAGE=true
      - ORTHANC__POSTGRESQL__ENABLE_INDEX=true
      
      # DICOM Configuration
      - ORTHANC__DICOM_AET=IRIS_ORTHANC
      - ORTHANC__DICOM_PORT=4242
      
      # Storage Configuration
      - ORTHANC__STORAGE_AREA=/var/lib/orthanc/db
    ports:
      - "8042:8042"  # HTTP REST API
      - "4242:4242"  # DICOM protocol
    volumes:
      - orthanc_storage:/var/lib/orthanc/db
      - orthanc_logs:/var/log/orthanc
    depends_on:
      postgres_orthanc:
        condition: service_healthy
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8042/system"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # üì¶ Object Storage Services
  # ===========================

  # MinIO - HIPAA-compliant Document Storage
  minio:
    image: minio/minio:latest
    container_name: iris_minio_storage
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-iris_minio_admin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-iris_secure_minio_password}
      MINIO_SERVER_URL: http://localhost:9000
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_storage_data:/data
    command: server /data --console-address ":9001"
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # ü§ñ ML/AI Processing Services
  # =============================

  # ML Model Server (TensorFlow Serving)
  tensorflow-serving:
    image: tensorflow/serving:latest
    container_name: iris_tensorflow_serving
    environment:
      - MODEL_CONFIG_FILE=/models/models.config
      - MODEL_CONFIG_FILE_POLL_WAIT_SECONDS=60
      - MONITORING_CONFIG_FILE=/models/monitoring.config
    ports:
      - "8501:8501"  # REST API
      - "8500:8500"  # gRPC API
    volumes:
      - ./ml_models:/models:ro
    networks:
      - iris_network
    restart: unless-stopped

  # Jupyter Notebook for ML Development
  jupyter:
    image: jupyter/tensorflow-notebook:latest
    container_name: iris_jupyter_ml
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-iris_jupyter_token}
    ports:
      - "8888:8888"
    volumes:
      - jupyter_notebooks:/home/jovyan/work
      - ./ml_models:/home/jovyan/models
    networks:
      - iris_network
    restart: unless-stopped

  # üìä Monitoring and Observability
  # ================================

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: iris_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - iris_network
    restart: unless-stopped

  # Grafana - Visualization Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: iris_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-grafana_admin_password}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - iris_network
    restart: unless-stopped

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: iris_jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
    networks:
      - iris_network
    restart: unless-stopped

  # üöÄ Main Application Services
  # =============================

  # FastAPI Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: iris_app_main
    environment:
      # Core Configuration
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # Database Configuration
      - DATABASE_URL=postgresql://postgres:${DATABASE_PASSWORD:-password}@postgres:5432/iris_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      
      # JWT Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
      
      # PHI/PII Encryption
      - PHI_ENCRYPTION_KEY=${PHI_ENCRYPTION_KEY}
      - PII_ENCRYPTION_KEY=${PII_ENCRYPTION_KEY:-${PHI_ENCRYPTION_KEY}}
      
      # MinIO Configuration
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-iris_minio_admin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-iris_secure_minio_password}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_SECURE=false
      
      # Vector Database Configuration
      - MILVUS_HOST=milvus-standalone
      - MILVUS_PORT=19530
      
      # Orthanc Configuration
      - ORTHANC_URL=http://orthanc:8042
      - ORTHANC_USERNAME=iris_api
      - ORTHANC_PASSWORD=${ORTHANC_API_KEY:-secure_iris_key}
      
      # ML Services Configuration
      - TENSORFLOW_SERVING_URL=http://tensorflow-serving:8501
      
      # Monitoring Configuration
      - PROMETHEUS_URL=http://prometheus:9090
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      
      # SOC2 Compliance
      - SOC2_COMPLIANCE_MODE=true
      - AUDIT_SIGNING_KEY=${AUDIT_SIGNING_KEY}
      
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      milvus-standalone:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - iris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery Worker - Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: iris_celery_worker
    environment:
      - DEBUG=${DEBUG:-false}
      - DATABASE_URL=postgresql://postgres:${DATABASE_PASSWORD:-password}@postgres:5432/iris_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./app:/app/app:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - iris_network
    command: ["celery", "-A", "app.core.tasks", "worker", "--loglevel=info"]
    restart: unless-stopped

  # Celery Beat - Scheduled Tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: iris_celery_beat
    environment:
      - DEBUG=${DEBUG:-false}
      - DATABASE_URL=postgresql://postgres:${DATABASE_PASSWORD:-password}@postgres:5432/iris_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./app:/app/app:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - iris_network
    command: ["celery", "-A", "app.core.tasks", "beat", "--loglevel=info"]
    restart: unless-stopped

# üìÅ Persistent Storage Volumes
# ==============================
volumes:
  # Database Volumes
  postgres_main_data:
    driver: local
  postgres_orthanc_data:
    driver: local
  redis_data:
    driver: local
  
  # Vector Database Volumes
  milvus_etcd_data:
    driver: local
  milvus_minio_data:
    driver: local
  milvus_standalone_data:
    driver: local
  
  # Medical Imaging Volumes
  orthanc_storage:
    driver: local
  orthanc_logs:
    driver: local
  
  # Object Storage Volumes
  minio_storage_data:
    driver: local
  
  # ML/AI Volumes
  jupyter_notebooks:
    driver: local
  
  # Monitoring Volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# üåê Network Configuration
# =========================
networks:
  iris_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1