[tool:pytest]
# Clinical Workflows Test Configuration
# Enterprise-grade test configuration for comprehensive validation

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test directory
testpaths = app/modules/clinical_workflows/tests

# Minimum version requirements
minversion = 7.0

# Add current directory to Python path
addopts = 
    -v
    --strict-markers
    --strict-config
    --tb=short
    --show-capture=no
    --durations=10
    --maxfail=5
    --color=yes
    --cov=app/modules/clinical_workflows
    --cov-report=html:htmlcov/clinical_workflows
    --cov-report=term-missing
    --cov-report=xml:coverage-clinical-workflows.xml
    --cov-fail-under=90
    --junitxml=test-results-clinical-workflows.xml

# Custom markers for test categorization
markers =
    # Test level markers
    unit: Unit tests - isolated component testing
    integration: Integration tests - component interaction testing
    security: Security tests - PHI protection and compliance
    performance: Performance tests - speed and scalability
    e2e: End-to-end tests - complete workflow scenarios
    chaos: Chaos engineering tests - failure scenarios
    
    # Role-based markers for user testing
    physician: Tests requiring physician role/permissions
    nurse: Tests requiring nurse role/permissions
    admin: Tests requiring administrator role/permissions
    clinical_admin: Tests requiring clinical administrator role/permissions
    ai_researcher: Tests requiring AI researcher role/permissions
    patient: Tests requiring patient role/permissions
    unauthorized: Tests for unauthorized user scenarios
    
    # Compliance markers
    hipaa: Tests for HIPAA compliance validation
    soc2: Tests for SOC2 compliance validation
    fhir: Tests for FHIR R4 compliance validation
    
    # Performance categories
    fast: Fast tests (< 1 second)
    slow: Slow tests (> 5 seconds)
    memory: Memory usage tests
    concurrent: Concurrency tests
    
    # Data classification markers
    phi: Tests involving PHI (Protected Health Information)
    pii: Tests involving PII (Personally Identifiable Information)
    confidential: Tests involving confidential data
    
    # Feature markers
    encryption: Tests for encryption/decryption functionality
    audit: Tests for audit trail functionality
    workflow: Tests for workflow management
    analytics: Tests for analytics and reporting
    
    # Environment markers
    requires_database: Tests requiring database connection
    requires_redis: Tests requiring Redis connection
    requires_containers: Tests requiring Docker containers
    requires_external_services: Tests requiring external service mocks

# Test timeout configuration
timeout = 300
timeout_method = thread

# Warnings filter
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:jose
    ignore::UserWarning:passlib

# Logging configuration for tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging
log_file = logs/clinical_workflows_tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Asyncio configuration
asyncio_mode = auto

# Pytest-xdist configuration for parallel execution
dist = loadgroup
tx = popen//python=python3

# Security test configuration
# Ensure no sensitive data in test outputs
--capture=sys

# Performance test configuration
benchmark_min_rounds = 5
benchmark_max_time = 2.0
benchmark_min_time = 0.000005
benchmark_timer = time.perf_counter
benchmark_sort = min
benchmark_group_by = group
benchmark_warmup = true
benchmark_warmup_iterations = 100000
benchmark_json = benchmark-results-clinical-workflows.json

# Coverage configuration
[coverage:run]
source = app/modules/clinical_workflows
omit = 
    */tests/*
    */test_*
    */conftest.py
    */__pycache__/*
    */migrations/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = true
skip_covered = false
precision = 2

[coverage:html]
directory = htmlcov/clinical_workflows
title = Clinical Workflows Test Coverage Report

[coverage:xml]
output = coverage-clinical-workflows.xml