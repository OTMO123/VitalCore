#!/bin/bash
# Backend Restart Script with Fixes Applied
# Auto-generated by BackendFixer

echo "üîÑ Restarting Backend with Applied Fixes..."
echo "==========================================="

# Kill existing backend processes
echo "üõë Stopping existing backend processes..."
pkill -f "uvicorn.*main:app" || echo "No uvicorn processes found"
pkill -f "python.*main.py" || echo "No python main.py processes found"

# Wait for processes to stop
sleep 2

# Check if port 8000 is still in use
if lsof -i :8000 > /dev/null 2>&1; then
    echo "‚ö†Ô∏è  Port 8000 still in use - waiting..."
    sleep 3
fi

# Start backend with proper configuration
echo "üöÄ Starting backend server..."
cd "$(dirname "$0")"

# Try different startup methods
if command -v uvicorn > /dev/null 2>&1; then
    echo "Starting with uvicorn..."
    uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload &
    BACKEND_PID=$!
elif python3 -c "import uvicorn" 2>/dev/null; then
    echo "Starting with python -m uvicorn..."
    python3 -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload &
    BACKEND_PID=$!
else
    echo "Starting with python app/main.py..."
    python3 app/main.py &
    BACKEND_PID=$!
fi

echo "Backend PID: $BACKEND_PID"

# Wait for backend to start
echo "‚è≥ Waiting for backend to start..."
for i in {1..30}; do
    if curl -s http://localhost:8000/health > /dev/null 2>&1; then
        echo "‚úÖ Backend started successfully!"
        echo "üåê Backend running at: http://localhost:8000"
        echo "üìö API Docs at: http://localhost:8000/docs"
        
        # Run quick health check
        echo ""
        echo "üè• Quick Health Check:"
        curl -s http://localhost:8000/health | jq . 2>/dev/null || curl -s http://localhost:8000/health
        
        exit 0
    fi
    echo "Waiting... ($i/30)"
    sleep 1
done

echo "‚ùå Backend failed to start within 30 seconds"
echo "Check logs and try manual startup:"
echo "  python3 app/main.py"
echo "  OR"
echo "  uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

exit 1
